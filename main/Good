from django.db import models
from django.contrib.auth.models import User

class Product(models.Model):
    STATUS_CHOICES = [
        ('available', 'Available'),
        ('unavailable', 'Unavailable'),
    ]
    name = models.CharField(max_length=255)
    description = models.TextField()
    price = models.DecimalField(max_digits=10, decimal_places=2)
    status = models.CharField(max_length=12, choices=STATUS_CHOICES, default='available')

    def __str__(self):
        return self.name

class Service(models.Model):
    STATUS_CHOICES = [
        ('available', 'Available'),
        ('unavailable', 'Unavailable'),
    ]
    name = models.CharField(max_length=255)
    description = models.TextField()
    price = models.DecimalField(max_digits=10, decimal_places=2)
    status = models.CharField(max_length=12, choices=STATUS_CHOICES, default='available')

    def __str__(self):
        return self.name

class Order(models.Model):
    STATUS_CHOICES = [
        ('created', 'Created'),
        ('processing', 'Processing'),
        ('completed', 'Completed'),
    ]
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)
    status = models.CharField(max_length=12, choices=STATUS_CHOICES, default='created')
    full_name = models.CharField(max_length=255, blank=False, default='')
    phone_number = models.CharField(max_length=20, blank=False, default='')
    address = models.CharField(max_length=255, blank=False, default='')
    email = models.EmailField(blank=False, default='')
    responsible_person = models.CharField(max_length=255, blank=True, null=True)  # Ответственный за заказ
    due_date = models.DateTimeField(blank=True, null=True)  # Дата, когда заказ будет готов

    def __str__(self):
        return f'Order {self.id} by {self.user.username}'
    
    def get_total_cost(self):
        total_cost = sum(item.get_cost() for item in self.orderitem_set.all())
        return total_cost

class OrderItem(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE, null=True, blank=True)
    service = models.ForeignKey(Service, on_delete=models.CASCADE, null=True, blank=True)
    quantity = models.PositiveIntegerField(default=1)
    repair_type = models.CharField(max_length=255, blank=True, null=True)  # Тип поломки

    def __str__(self):
        return f'{self.product.name if self.product else self.service.name} in order {self.order.id}'
    
    def get_cost(self):
        return (self.product.price if self.product else self.service.price) * self.quantity

class Cart(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)

class CartItem(models.Model):
    cart = models.ForeignKey(Cart, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE, null=True, blank=True)
    service = models.ForeignKey(Service, on_delete=models.CASCADE, null=True, blank=True)
    quantity = models.PositiveIntegerField(default=1)


from django import forms
from .models import Order, OrderItem

class OrderForm(forms.ModelForm):
    class Meta:
        model = Order
        fields = ['full_name', 'phone_number', 'address', 'email']

class OrderItemForm(forms.ModelForm):
    class Meta:
        model = OrderItem
        fields = ['repair_type']




from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from .models import CartItem, Order, OrderItem
from .forms import OrderForm, OrderItemForm

@login_required
def form_order(request):
    cart_items = CartItem.objects.filter(cart__user=request.user)
    if request.method == 'POST':
        order_form = OrderForm(request.POST)
        order_item_forms = [OrderItemForm(request.POST, prefix=str(index)) for index, _ in enumerate(cart_items)]
        if order_form.is_valid() and all(form.is_valid() for form in order_item_forms):
            order = order_form.save(commit=False)
            order.user = request.user
            order.save()
            for form, item in zip(order_item_forms, cart_items):
                order_item = form.save(commit=False)
                order_item.order = order
                order_item.product = item.product
                order_item.service = item.service
                order_item.quantity = item.quantity
                order_item.save()
            cart_items.delete()
            return redirect('order_success', order_id=order.id)
    else:
        order_form = OrderForm()
        order_item_forms = [OrderItemForm(prefix=str(index)) for index, _ in enumerate(cart_items)]
    
    return render(request, 'main/form_order.html', {'order_form': order_form, 'order_item_forms': order_item_forms, 'cart_items': cart_items})

@login_required
def order_success(request, order_id):
    order = Order.objects.get(id=order_id)
    return render(request, 'main/order_success.html', {'order': order})



форм ордер
{% extends 'main/base.html' %}

{% block title %}Order{% endblock %}

{% block content %}
<h1>Order Summary</h1>
<form method="post">
    {% csrf_token %}
    <h2>Order Details</h2>
    {{ order_form.as_p }}
    <h2>Items</h2>
    <ul>
        {% for item, form in zip(cart_items, order_item_forms) %}
        <li>
            {{ item.product.name if item.product else item.service.name }}
            - Quantity: {{ item.quantity }}
            {{ form.as_p }}
        </li>
        {% endfor %}
    </ul>
    <button type="submit">Place Order</button>
</form>
{% endblock %}


саксес
{% extends 'main/base.html' %}

{% block title %}Order Success{% endblock %}

{% block content %}
<h1>Order Successful</h1>
<p>Your order has been successfully placed.</p>

<h2>Order Details</h2>
<p>Full Name: {{ order.full_name }}</p>
<p>Phone Number: {{ order.phone_number }}</p>
<p>Address: {{ order.address }}</p>
<p>Email: {{ order.email }}</p>
<p>Responsible Person: {{ order.responsible_person }}</p>
<p>Due Date: {{ order.due_date }}</p>
<p>Status: {{ order.get_status_display }}</p>

<h3>Items:</h3>
<ul>
    {% for item in order.orderitem_set.all %}
    <li>
        {{ item.product.name if item.product else item.service.name }}
        - Quantity: {{ item.quantity }}
        - Repair Type: {{ item.repair_type }}
        - Cost: {{ item.get_cost }} RUB
    </li>
    {% endfor %}
</ul>

<p>Total Cost: {{ order.get_total_cost }} RUB</p>
{% endblock %}



админка
from django.contrib import admin
from .models import Order, OrderItem

class OrderItemInline(admin.TabularInline):
    model = OrderItem
    fields = ['product', 'service', 'quantity', 'repair_type']
    extra = 0

class OrderAdmin(admin.ModelAdmin):
    list_display = ['user', 'full_name', 'phone_number', 'address', 'email', 'responsible_person', 'due_date', 'status', 'created_at', 'get_total_cost']
    inlines = [OrderItemInline]

admin.site.register(Order, OrderAdmin)
